# Copyright Â© 2018 Amdocs, Bell Canada, AT&T
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for resources.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global: # global defaults
  nodePortPrefix: 302

# application image
repository: nexus3.onap.org:10001
image: onap/aai-schema-service:1.7.5
pullPolicy: Always
restartPolicy: Always
flavor: small
# default number of instances
replicaCount: 1

nodeSelector: {}

affinity: {}

# probe configuration parameters
liveness:
  initialDelaySeconds: 60
  periodSeconds: 60
  # necessary to disable liveness probe when setting breakpoints
  # in debugger so K8s doesn't restart unresponsive container
  enabled: false

readiness:
  initialDelaySeconds: 60
  periodSeconds: 10

service:
  type: ClusterIP
  portName: aai-schema-service-8452
  internalPort: 8452
  portName2: aai-schema-service-5005
  internalPort2: 5005

ingress:
  enabled: false

logback:
  rootLogLevel: {{ .Values.logback.rootLogLevel.schemaService }}
  logger:
    apache: {{ .Values.logback.logger.apache }}
    apacheCamel: {{ .Values.logback.logger.apacheCamel }}
    apacheCamelComponentRestlet: {{ .Values.logback.logger.apacheCamelComponentRestlet }}
    apacheCamelProcessorInterceptor: {{ .Values.logback.logger.apacheCamelProcessorInterceptor }}
    apacheCommons: {{ .Values.logback.logger.apacheCommons }}
    apacheCommonsHttpclient: {{ .Values.logback.logger.apacheCommonsHttpclient }}
    apacheCoyote: {{ .Values.logback.logger.apacheCoyote }}
    apacheCxf: {{ .Values.logback.logger.apacheCxf }}
    apacheCxfJaxrsInterceptor: {{ .Values.logback.logger.apacheCxfJaxrsInterceptor }}
    apacheCxfService: {{ .Values.logback.logger.apacheCxfService }}
    apacheJasper: {{ .Values.logback.logger.apacheJasper }}
    apacheZookeeper: {{ .Values.logback.logger.apacheZookeeper }}
    attAftDme2: {{ .Values.logback.logger.attAftDme2 }}
    blogSpringJms: {{ .Values.logback.logger.blogSpringJms }}
    codehausGroovy: {{ .Values.logback.logger.codehausGroovy }}
    eclipseJetty: {{ .Values.logback.logger.eclipseJetty }}
    hibernate: {{ .Values.logback.logger.hibernate }}
    hibernateEjb: {{ .Values.logback.logger.hibernateEjb }}
    hibernateValidator: {{ .Values.logback.logger.hibernateValidator }}
    janusgraph: {{ .Values.logback.logger.janusgraph }}
    jaywayJsonpath: {{ .Values.logback.logger.jaywayJsonpath }}
    netflixLoadbalancer: {{ .Values.logback.logger.netflixLoadbalancer }}
    qosLogbackClassic: {{ .Values.logback.logger.qosLogbackClassic }}
    qosLogbackCore: {{ .Values.logback.logger.qosLogbackCore }}
    restlet: {{ .Values.logback.logger.restlet }}
    sf: {{ .Values.logback.logger.sf }}
    springframework: {{ .Values.logback.logger.springframework }}
    springframeworkBeans: {{ .Values.logback.logger.springframeworkBeans }}
    springframeworkWeb: {{ .Values.logback.logger.springframeworkWeb }}
    zookeeper: {{ .Values.logback.logger.zookeeper }}


  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #
  # Example:
  # Configure resource requests and limits
  # ref: http://kubernetes.io/docs/user-guide/compute-resources/
  # Minimum memory for development is 2 CPU cores and 4GB memory
  # Minimum memory for production is 4 CPU cores and 8GB memory
#resources:
#  limits:
#    cpu: 2
#    memory: 4Gi
#  requests:
#    cpu: 2
#    memory: 4Gi
resources:
  small:
    limits:
      cpu: 2
      memory: 4Gi
    requests:
      cpu: 1
      memory: 3Gi
  large:
    limits:
      cpu: 4
      memory: 8Gi
    requests:
      cpu: 2
      memory: 4Gi
  unlimited: {}
